Given a matrix of m x n elements (m rows, n columns), return all elements of the matrix in spiral order.

Example 1:

Input:
[
 [ 1, 2, 3 ],
 [ 4, 5, 6 ],
 [ 7, 8, 9 ]
]
Output: [1,2,3,6,9,8,7,4,5]
Example 2:

Input:
[
  [1, 2, 3, 4],
  [5, 6, 7, 8],
  [9,10,11,12]
]
Output: [1,2,3,4,8,12,11,10,9,5,6,7]


---------------------Solution------------------------

class Solution:
    def spiralOrder(self, matrix: List[List[int]]) -> List[int]:
        
        if not matrix:
            return []
        
        i,j,d = 0,0,"right"
        
        a1,a2 = 0,len(matrix)-1
        b1,b2 = 0,len(matrix[0])-1
        
        ans = [matrix[0][0]]
        
        while len(ans) < len(matrix)*len(matrix[0]):
            
            if d == "right":
                if j < b2:
                    j+=1
                else:
                    d = "down"
                    i+=1
                    a1+=1
                
            elif d == "down":
                if i < a2:
                    i +=1
                else:
                    d= "left"
                    j -=1
                    b2 -=1
                
            elif d == "left":
                if j > b1:
                    j-=1
                else:
                    d = "up"
                    i-=1
                    a2 -=1
                
            elif d == "up":
                if i > a1:
                    i-=1
                else:
                    d = "right"
                    b1+=1
                    j+=1
                
                
            ans.append(matrix[i][j])
            
            
        return ans
