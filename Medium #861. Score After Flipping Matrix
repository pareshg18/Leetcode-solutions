We have a two dimensional matrix A where each value is 0 or 1.

A move consists of choosing any row or column, and toggling each value in that row or column: changing all 0s to 1s, and all 1s to 0s.

After making any number of moves, every row of this matrix is interpreted as a binary number, and the score of the matrix is the sum of these numbers.

Return the highest possible score.

 

Example 1:

Input: [[0,0,1,1],[1,0,1,0],[1,1,0,0]]
Output: 39
Explanation:
Toggled to [[1,1,1,1],[1,0,0,1],[1,1,1,1]].
0b1111 + 0b1001 + 0b1111 = 15 + 9 + 15 = 39
 

Note:

1 <= A.length <= 20
1 <= A[0].length <= 20
A[i][j] is 0 or 1.


--------------Solution------------------------

class Solution:
    def matrixScore(self, A: List[List[int]]) -> int:
        
        for i in range(len(A)):
            for j in range(len(A[i])):
                A[i][j] = str(A[i][j])

        def invert(x):
            ans = []
            for k in x:
                if k == '0':
                    ans.append('1') 
                else:
                    ans.append('0')
            return(ans)


        def binary_sum(matrix):
            lst = []
            for i in matrix:
                lst.append(int(''.join(i),2))
            return(sum(lst))
        
        for i in range(len(A)):
            if int(''.join(invert(A[i])),2) > int(''.join(A[i]),2):
                A[i] = invert(A[i])
                
        summ = binary_sum(A)
        
        for y in range(len(A[0])):
            bnum = ''
            for j in range(len(A)):
                bnum += A[j][y]
            lst = list(invert(bnum))
            for m in range(len(A)):
                A[m][y] = lst.pop(-1)
            if binary_sum(A) < summ:
                bnum = ''
                for j in range(len(A)):
                    bnum += A[j][y]
                lst = list(invert(bnum))
                for m in range(len(A)):
                    A[m][y] = lst.pop(-1)  
            else:
                summ = binary_sum(A)
                
        return(summ)
