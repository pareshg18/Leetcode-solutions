A string S of lowercase letters is given. We want to partition this string into as many parts as possible so that each letter appears in at most one part, and return a list of integers representing the size of these parts.

Example 1:
Input: S = "ababcbacadefegdehijhklij"
Output: [9,7,8]
Explanation:
The partition is "ababcbaca", "defegde", "hijhklij".
This is a partition so that each letter appears in at most one part.
A partition like "ababcbacadefegde", "hijhklij" is incorrect, because it splits S into less parts.
Note:

S will have length in range [1, 500].
S will consist of lowercase letters ('a' to 'z') only.

------------------Solution----------------------


class Solution(object):
    def partitionLabels(self, S):
        """
        :type S: str
        :rtype: List[int]
        """
        d = {y:x for x,y in enumerate(S)}
        
        lst = []
        ind =0
        for i in range(len(S)):
            letter = S[i]
            ind = max(ind,d[letter])
            if i==ind:
                lst.append(i+1)
        ans = [lst[0]]
        for i in range(1,len(lst)):
            ans.append(lst[i]-lst[i-1])
            
        return(ans)
