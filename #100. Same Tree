Given two binary trees, write a function to check if they are the same or not.

Two binary trees are considered the same if they are structurally identical and the nodes have the same value.

Example 1:

Input:     1         1
          / \       / \
         2   3     2   3

        [1,2,3],   [1,2,3]

Output: true
Example 2:

Input:     1         1
          /           \
         2             2

        [1,2],     [1,null,2]

Output: false
Example 3:

Input:     1         1
          / \       / \
         2   1     1   2

        [1,2,1],   [1,1,2]

Output: false


--------------------------Solution----------------------------

# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution:
    def isSameTree(self, p: TreeNode, q: TreeNode) -> bool:
        
        def dfs(node):
            if node:
                lst.append(node.val)
                dfs(node.left)
                dfs(node.right)
            else:
                lst.append('null')
            
        lst = []
        dfs(p)
        lst1 =lst[0:]
        
        
        lst = []
        dfs(q)
        lst2 =lst[0:]
        
        return lst1 == lst2
