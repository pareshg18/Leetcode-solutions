Given n non-negative integers a1, a2, ..., an , where each represents a point at coordinate (i, ai). n vertical lines are drawn such that the two endpoints of line i is at (i, ai) and (i, 0). Find two lines, which together with x-axis forms a container, such that the container contains the most water.

Note: You may not slant the container and n is at least 2.

The above vertical lines are represented by array [1,8,6,2,5,4,8,3,7]. In this case, the max area of water (blue section) the container can contain is 49.

 

Example:

Input: [1,8,6,2,5,4,8,3,7]
Output: 49


-----------------Solution-----------------------------------

class Solution:
    def maxArea(self, height: List[int]) -> int:
        
        
        first = 0
        last = len(height) -1
        area = 0
        maxarea = 0
        
        while last > first:
            val1 = last - first
            val2 = min(height[first],height[last])
            area = val1*val2
            maxarea = max(maxarea,area)
            
            if height[first] < height[last]:
                first += 1
            elif height[last] < height[first]:
                last -= 1
            else:
                first +=1
        
        return maxarea
