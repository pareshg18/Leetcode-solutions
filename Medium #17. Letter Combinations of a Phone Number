Given a string containing digits from 2-9 inclusive, return all possible letter combinations that the number could represent.

A mapping of digit to letters (just like on the telephone buttons) is given below. Note that 1 does not map to any letters.



Example:

Input: "23"
Output: ["ad", "ae", "af", "bd", "be", "bf", "cd", "ce", "cf"].


--------------------------Solution------------------------------------


class Solution:
    def letterCombinations(self, digits: str) -> List[str]:
        
        if digits == "":
            return ""
        
        import itertools
        
        letter = [False, False, "abc","def","ghi","jkl","mno","pqrs","tuv","wxyz"]
        
        combo = []
        for i in range(len(digits)):
            if letter[int(digits[i])]:
                combo.append(letter[int(digits[i])])
                
        return [''.join(i) for i in list(itertools.product(*combo))]
