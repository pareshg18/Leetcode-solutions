You have a list of words and a pattern, and you want to know which words in words matches the pattern.

A word matches the pattern if there exists a permutation of letters p so that after replacing every letter x in the pattern with p(x), we get the desired word.

(Recall that a permutation of letters is a bijection from letters to letters: every letter maps to another letter, and no two letters map to the same letter.)

Return a list of the words in words that match the given pattern. 

You may return the answer in any order.

 

Example 1:

Input: words = ["abc","deq","mee","aqq","dkd","ccc"], pattern = "abb"
Output: ["mee","aqq"]
Explanation: "mee" matches the pattern because there is a permutation {a -> m, b -> e, ...}. 
"ccc" does not match the pattern because {a -> c, b -> c, ...} is not a permutation,
since a and b map to the same letter.
 

Note:

1 <= words.length <= 50
1 <= pattern.length = words[i].length <= 20



-------------Solution------------------

class Solution:
    def findAndReplacePattern(self, words: List[str], pattern: str) -> List[str]:
        
        lst = []
        for match in words:
            d1 ={}
            for i in range(len(match)):
                if match[i] not in d1:
                    d1[match[i]] = pattern[i]
                else:
                    d1[match[i]] = pattern[i]
                    
            d2 = {}
            for i in range(len(pattern)):
                if pattern[i] not in d2:
                    d2[pattern[i]] = match[i]
                else:
                    d2[pattern[i]] = match[i]
                    
            if len(d1) ==len(d2):
                if list(d1.keys() ) == list(d2.values()) and list(d2.keys() ) == list(d1.values()):
                    lst.append(match)
                    
                    
        return(lst)
